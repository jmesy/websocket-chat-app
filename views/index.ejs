<!DOCTYPE html>
<html lang="en-US">
    <head>
        <title>WebSocket client</title>
        <meta charset="utf-8" />
        <!-- Note that we dont' include '/public'. -->
        <link rel="stylesheet" href="/stylesheets/style.css" />
        <link
            href="https://fonts.googleapis.com/css2?family=Ubuntu&display=swap"
            rel="stylesheet"
        />
        <style>
            body {
                font-family: 'Ubuntu', sans serif;
            }
        </style>
    </head>
    <body>
        <h2>WebSocket Chat App</h2>
        <div>
            <div class="wrapper">
                <ul>
                    <!-- This is the component for incoming messages -->
                    <li class="component">
                        <div>
                            <div class="nickname"></div>
                            <div class="message"></div>
                        </div>
                    </li>
                    <!--  -->
                </ul>
            </div>
            <form class="chat-form">
                <ul>
                    <li>
                        <input
                            type="text"
                            id="message"
                            name="msg"
                            required
                            autofocus
                            autocomplete="off"
                        />
                    </li>
                    <li class="button">
                        <button type="button">Send</button>
                    </li>
                </ul>
            </form>
        </div>
        <!-- The script will move to a separate file. -->
        <script>
            //Append incoming messages.
            //This is outside of startServer not to append the event listener twice.
            const formElement=document.querySelector('.chat-form');
            formElement.addEventListener('submit', (event) => {
                event.preventDefault();//What is this preventing exactly?
                const formData = new FormData(formElement);
                if(ws){
                    if (ws.readyState == WebSocket.OPEN) {
                        ws.send(
                            JSON.stringify({
                                message: formData.get('msg'),
                            })
                        );
                    }
                }
                formElement.reset(); //Either this or set empty string on the value.
                //messageField.focus()?
            });

            let ws=null;
            const startServer=()=>{
                ws = new WebSocket('ws:localhost:8080');
                ws.onopen = (event) => {
                    console.log('Connection to server opened.');
                };

                const liElement=document.querySelector('.component');
                const ulElement=document.querySelector('.wrapper ul');
                const appendMessage=function(data){
                    liElementClone=liElement.cloneNode(true);
                    for(const property in data.props){
                        if(data.type!='message'){//Skip nickname for service messages.
                            if(property=='nickname')
                                continue;
                        }
                        liElementClone
                            .querySelector(`.component .${property}`)
                            .textContent=data.props[property];
                    }
                    ulElement.appendChild(liElementClone);
                    ulElement.scrollTop=ulElement.scrollHeight;
                }

                ws.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    appendMessage(data);
                };

                //Try to reconnect if the server is down.
                let timeoutID=null;
                ws.onclose=(event)=> {
                    console.log('Server is down.');
                    timeoutID=setTimeout(()=>{
                        startServer();
                    }, 2000);
                }
            }
            startServer();
        </script>
    </body>
</html>
